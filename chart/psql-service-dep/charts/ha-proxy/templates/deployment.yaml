apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.k8Name }}
  #namespace: {{ .Values.k8Project }}
  annotations:
      app.kubernetes.io/part-of: haproxy
spec:
  selector:
    matchLabels: 
      app: {{ .Values.k8Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      annotations:
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        app: {{ .Values.k8Name }}
        phase: test
    spec:
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
      containers:
      - name: {{ .Values.k8Name }}
        image: '{{ .Values.image.repository }}{{ .Values.image.name }}:{{ .Values.image.tag }}'
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        workingDir: /opt/haproxy
        command: ["./haproxy", "-f", "./conf/haproxy.cfg"]
        volumeMounts:
        - name: haproxy-config
          mountPath: /opt/haproxy/conf/
        ports:
          - containerPort: {{ .Values.service.port }}
        securityContext:
          #readOnlyRootFilesystem: true
          runAsNonRoot: true
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
        readinessProbe:
          httpGet:
            path: '{{ first .Values.locations }}/healthcheck'
            port: {{ .Values.service.port }}
            scheme: HTTP
      volumes:
      - name: haproxy-config
        configMap:
          name: haproxy-config
          items:
          - key: "haproxy_cfg"
            path: "haproxy.cfg"